{"version":3,"sources":["utils/constants.js","helpers/helper.js","components/Button.jsx","components/Cell.jsx","components/Cubes.jsx","App.js","serviceWorker.js","index.js"],"names":["BUTTON_MARGIN","createColumn","col","helper","createRow","rowNumber","width","rowData","row","cols","push","getVisibility","matrix","type","status","length","Button","_this$props","this","props","title","buttonProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","PureComponent","Cell","tdProps","Cubes","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","height","cellSizeWithMargin","activeRow","activeCol","rmButtonLeft","rmButtonTop","visibilityCol","visibilityRow","addRow","_this$state","setState","addColumn","_this$state2","newMatrix","map","item","removeRow","_this$state3","filter","index","removeColumn","_this$state4","onMouseEnter","_this$state5","onMouseLeave","e","relatedTarget","includes","initialHeight","initialWidth","cellSize","_this2","_ref","indexRow","key","_ref2","indexCol","Cell_Cell","_this$state6","style","marginLeft","Button_Button","left","visibility","onClick","top","buildTable","defaultProps","App","Cubes_Cubes","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a8593c7.chunk.js","sourcesContent":["export const BUTTON_MARGIN = 4;\n","export const createColumn = (col) => {\n    return { col }\n};\n\nexport const createRow = (rowNumber, width) => {\n    const rowData = { row: rowNumber, cols: []};\n    for (let col = 0; col < width; col++) {\n        rowData.cols.push(createColumn(col))\n    }\n    return rowData;\n};\n\nexport const getVisibility = (matrix, type, status) => {\n    const length = type === 'row' ? matrix.length : matrix[0].cols.length;\n\n    return length < 2 ? 'hidden' : status;\n};\n\nexport default {\n    createColumn,\n    createRow,\n    getVisibility,\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends PureComponent {\n\n    static propTypes = {\n        type: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n    };\n\n    render() {\n        const { type, title, ...buttonProps } = this.props;\n\n        return (\n            <button {...buttonProps} className={`button ${type}-button`}>{ title }</button>\n        );\n\n    }\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Cell extends PureComponent {\n\n    static propTypes = {\n        row: PropTypes.number.isRequired,\n        col: PropTypes.number.isRequired,\n        width: PropTypes.number.isRequired,\n        height: PropTypes.number.isRequired,\n    };\n\n    render() {\n\n        const { row, col, ...tdProps } = this.props;\n\n        return (\n            <td className=\"cell\" {...tdProps}>{ `${row},${col}` }</td>\n        );\n\n    }\n}\n","import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { BUTTON_MARGIN } from '../utils/constants';\nimport helper from '../helpers/helper';\nimport Button from './Button';\nimport Cell from './Cell';\n\nexport default class Cubes extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        const matrix = [];\n        const {initialHeight, initialWidth, cellSize} = this.props;\n        for (let row = 0; row < initialHeight; row++) {\n            matrix.push(helper.createRow(row, initialWidth));\n        }\n\n        this.state = {\n            matrix,\n            width: initialWidth,\n            height: initialHeight,\n            cellSize,\n            cellSizeWithMargin: cellSize + BUTTON_MARGIN,\n        }\n    }\n\n    static propTypes = {\n        initialWidth: PropTypes.number,\n        initialHeight: PropTypes.number,\n        cellSize: PropTypes.number,\n    };\n\n    static defaultProps = {\n        initialWidth: 4,\n        initialHeight: 4,\n        cellSize: 50,\n    };\n\n    state = {\n        matrix: [],\n        width: 0,\n        height: 0,\n        cellSizeWithMargin: 0,\n        activeRow: 0,\n        activeCol: 0,\n        rmButtonLeft: 0,\n        rmButtonTop: 0,\n        visibilityCol: 'hidden',\n        visibilityRow: 'hidden',\n    };\n\n    buildTable() {\n        const {matrix} = this.state;\n        const {cellSize} = this.props;\n\n        return matrix.map(({row, cols}, indexRow) => {\n            return <tr key={row}>{\n                cols.map(({col}, indexCol) => {\n                    return <Cell col={col} row={row} key={col} height={cellSize} width={cellSize}\n                                 onMouseEnter={this.onMouseEnter(indexRow, indexCol)}/>\n                })\n            }\n            </tr>;\n        });\n    };\n\n    addRow = () => {\n        const {matrix, height} = this.state;\n        matrix.push(helper.createRow(height, matrix[0].cols.length));\n\n        this.setState({\n            matrix,\n            height: height + 1,\n        });\n    };\n\n    addColumn = () => {\n        const {matrix, width} = this.state;\n        const newMatrix = matrix.map(item => {\n            item.cols.push(helper.createColumn(width));\n            return item;\n        });\n\n        this.setState({\n            matrix: newMatrix,\n            width: width + 1,\n        });\n    };\n\n    removeRow = () => {\n        const {matrix, activeRow} = this.state;\n\n        if (matrix.length > 1) {\n            const newMatrix = matrix.filter((item, index) => index !== activeRow);\n\n            this.setState({\n                matrix: newMatrix,\n                visibilityCol: 'hidden',\n                visibilityRow: 'hidden',\n            });\n        }\n    };\n\n    removeColumn = () => {\n        const {matrix, activeCol} = this.state;\n\n        if (matrix[0].cols.length > 1) {\n            const newMatrix = matrix.map(item => {\n                item.cols = item.cols.filter((item, index) => index !== activeCol);\n                return item;\n            });\n\n            this.setState({\n                matrix: newMatrix,\n                visibilityCol: 'hidden',\n                visibilityRow: 'hidden',\n            });\n        }\n    };\n\n    onMouseEnter = (activeRow, activeCol) => {\n        const {matrix, cellSizeWithMargin} = this.state;\n\n        return () => {\n            this.setState({\n                activeRow,\n                activeCol,\n                rmButtonLeft: activeCol * cellSizeWithMargin,\n                rmButtonTop: activeRow * cellSizeWithMargin,\n                visibilityRow: helper.getVisibility(matrix, 'row', 'visible'),\n                visibilityCol: helper.getVisibility(matrix, 'col', 'visible'),\n            });\n        };\n    };\n\n    onMouseLeave = (e) => {\n        if (e.relatedTarget.className && !e.relatedTarget.className.includes('remove')) {\n            this.setState({\n                visibilityCol: 'hidden',\n                visibilityRow: 'hidden',\n            });\n        }\n    };\n\n    render() {\n        const {rmButtonLeft, rmButtonTop, cellSizeWithMargin, visibilityCol, visibilityRow} = this.state;\n        const {cellSize} = this.props;\n\n        return (\n            <div>\n                <div className=\"top\" style={{marginLeft: cellSizeWithMargin}}>\n                    <Button style={{left: rmButtonLeft, visibility: visibilityCol, width: cellSize, height: cellSize}}\n                            onClick={this.removeColumn}\n                            type=\"remove\"\n                            title=\"-\"/>\n                </div>\n                <div className=\"container\">\n                    <div className=\"left\">\n                        <Button style={{top: rmButtonTop, visibility: visibilityRow, width: cellSize, height: cellSize}}\n                                onClick={this.removeRow}\n                                type=\"remove\"\n                                title=\"-\"/>\n                    </div>\n                    <table className=\"table\" onMouseLeave={this.onMouseLeave}>\n                        <tbody>\n                            {this.buildTable()}\n                        </tbody>\n                    </table>\n                    <div className=\"right\">\n                        <Button style={{width: cellSize, height: cellSize}}\n                                onClick={this.addColumn}\n                                type=\"add\"\n                                title=\"+\"/>\n                    </div>\n                </div>\n                <div className=\"bottom\" style={{marginLeft: cellSizeWithMargin}}>\n                    <Button style={{width: cellSize, height: cellSize}}\n                            onClick={this.addRow}\n                            type=\"add\"\n                            title=\"+\"/>\n                </div>\n            </div>\n        );\n    }\n};\n","import React, {Component} from 'react';\nimport Cubes from './components/Cubes.jsx';\nimport './App.css';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Cubes/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}