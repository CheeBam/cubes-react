{"version":3,"sources":["helpers/Table.js","components/Button.jsx","components/Cell.jsx","components/Cubes.jsx","utils/constants.js","App.js","serviceWorker.js","index.js"],"names":["Table","createColumn","col","createRow","rowNumber","width","rowData","row","cols","push","getVisibility","matrix","type","status","length","Button","_this$props","this","props","title","buttonProps","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","PureComponent","Cell","tdProps","Cubes","state","height","cellSizeWithMargin","activeRow","activeCol","rmButtonLeft","rmButtonTop","visibilityCol","visibilityRow","addRow","_this$state","_this","setState","addColumn","_this$state2","newMatrix","map","item","removeRow","_this$state3","filter","index","removeColumn","_this$state4","onMouseEnter","_this$state5","onMouseLeave","e","relatedTarget","includes","init","initialWidth","initialHeight","cellSize","_this$props2","_this2","_ref","indexRow","key","_ref2","indexCol","Cell_Cell","_this$state6","style","marginLeft","Button_Button","left","visibility","onClick","top","buildTable","defaultProps","App","Cubes_Cubes","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAAqBA,sCAEVC,aAAe,SAACC,GACnB,MAAO,CAAEA,QAHIF,EAMVG,UAAY,SAACC,EAAWC,GAE3B,IADA,IAAMC,EAAU,CAAEC,IAAKH,EAAWI,KAAM,IAC/BN,EAAM,EAAGA,EAAMG,EAAOH,IAC3BI,EAAQE,KAAKC,KAAKT,EAAMC,aAAaC,IAEzC,OAAOI,GAXMN,EAcVU,cAAgB,SAACC,EAAQC,EAAMC,GAGlC,OAFwB,QAATD,EAAiBD,EAAOG,OAASH,EAAO,GAAGH,KAAKM,QAE/C,EAAI,SAAWD,cCdlBE,mLAOR,IAAAC,EACmCC,KAAKC,MAArCN,EADHI,EACGJ,KAAMO,EADTH,EACSG,MAAUC,EADnBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,kBAGL,OACIO,EAAAC,EAAAC,cAAA,SAAAJ,OAAAK,OAAA,GAAYN,EAAZ,CAAyBO,UAAS,UAAAC,OAAYhB,EAAZ,aAA6BO,UAXvCU,iBCAfC,mLASR,IAAAd,EAE4BC,KAAKC,MAA9BX,EAFHS,EAEGT,IAAKL,EAFRc,EAEQd,IAAQ6B,EAFhBV,OAAAC,EAAA,EAAAD,CAAAL,EAAA,eAIL,OACIO,EAAAC,EAAAC,cAAA,KAAAJ,OAAAK,OAAA,CAAIC,UAAU,QAAWI,GAAzB,GAAAH,OAAuCrB,EAAvC,KAAAqB,OAA8C1B,WAdxB2B,iBCKbG,6MAcjBC,MAAQ,CACJtB,OAAQ,GACRN,MAAO,EACP6B,OAAQ,EACRC,mBAAoB,EACpBC,UAAW,EACXC,UAAW,EACXC,aAAc,EACdC,YAAa,EACbC,cAAe,SACfC,cAAe,YA8CnBC,OAAS,WAAM,IAAAC,EACcC,EAAKX,MAAvBtB,EADIgC,EACJhC,OAAQuB,EADJS,EACIT,OACfvB,EAAOF,KAAKT,EAAMG,UAAU+B,EAAQvB,EAAO,GAAGH,KAAKM,SAEnD8B,EAAKC,SAAS,CACVlC,SACAuB,OAAQA,EAAS,OAIzBY,UAAY,WAAM,IAAAC,EACUH,EAAKX,MAAtBtB,EADOoC,EACPpC,OAAQN,EADD0C,EACC1C,MACT2C,EAAYrC,EAAOsC,IAAI,SAAAC,GAEzB,OADAA,EAAK1C,KAAKC,KAAKT,EAAMC,aAAaI,IAC3B6C,IAGXN,EAAKC,SAAS,CACVlC,OAAQqC,EACR3C,MAAOA,EAAQ,OAIvB8C,UAAY,WAAM,IAAAC,EACcR,EAAKX,MAA1BtB,EADOyC,EACPzC,OAAQyB,EADDgB,EACChB,UAEf,GAAIzB,EAAOG,OAAS,EAAG,CACnB,IAAMkC,EAAYrC,EAAO0C,OAAO,SAACH,EAAMI,GAAP,OAAiBA,IAAUlB,IAE3DQ,EAAKC,SAAS,CACVlC,OAAQqC,EACRP,cAAezC,EAAMU,cAAcsC,EAAW,MAAO,iBAKjEO,aAAe,WAAM,IAAAC,EACWZ,EAAKX,MAA1BtB,EADU6C,EACV7C,OAAQ0B,EADEmB,EACFnB,UAEf,GAAI1B,EAAO,GAAGH,KAAKM,OAAS,EAAG,CAC3B,IAAMkC,EAAYrC,EAAOsC,IAAI,SAAAC,GAEzB,OADAA,EAAK1C,KAAO0C,EAAK1C,KAAK6C,OAAO,SAACH,EAAMI,GAAP,OAAiBA,IAAUjB,IACjDa,IAGXN,EAAKC,SAAS,CACVlC,OAAQqC,EACRR,cAAexC,EAAMU,cAAcsC,EAAW,MAAO,iBAKjES,aAAe,SAACrB,EAAWC,GAAc,IAAAqB,EACAd,EAAKX,MAAnCtB,EAD8B+C,EAC9B/C,OAAQwB,EADsBuB,EACtBvB,mBAEf,OAAO,WACHS,EAAKC,SAAS,CACVT,YACAC,YACAC,aAAcD,EAAYF,EAC1BI,YAAaH,EAAYD,EACzBM,cAAezC,EAAMU,cAAcC,EAAQ,MAAO,WAClD6B,cAAexC,EAAMU,cAAcC,EAAQ,MAAO,iBAK9DgD,aAAe,SAACC,GACRA,EAAEC,cAAclC,YAAciC,EAAEC,cAAclC,UAAUmC,SAAS,WACjElB,EAAKC,SAAS,CACVL,cAAe,SACfC,cAAe,+FAjHvBxB,KAAK8C,kDAGU7C,GAAO,IAAAF,EAC4BC,KAAKC,MAA/C8C,EADchD,EACdgD,aAAcC,EADAjD,EACAiD,cAAeC,EADflD,EACekD,SAEjChD,EAAM8C,eAAiBA,GAAgB9C,EAAM+C,gBAAkBA,GAAiB/C,EAAMgD,WAAaA,GACnGjD,KAAK8C,sCAOT,IAFA,IAAMpD,EAAS,GADZwD,EAE6ClD,KAAKC,MAA9C+C,EAFJE,EAEIF,cAAeD,EAFnBG,EAEmBH,aAAcE,EAFjCC,EAEiCD,SAC3B3D,EAAM,EAAGA,EAAM0D,EAAe1D,IACnCI,EAAOF,KAAKT,EAAMG,UAAUI,EAAKyD,IAGrC/C,KAAK4B,SAAS,CACVlC,SACAN,MAAO2D,EACP9B,OAAQ+B,EACRC,WACA/B,mBAAoB+B,EC3DH,yCD+DZ,IAAAE,EAAAnD,KACFN,EAAUM,KAAKgB,MAAftB,OACAuD,EAAYjD,KAAKC,MAAjBgD,SAEP,OAAOvD,EAAOsC,IAAI,SAAAoB,EAAcC,GAAa,IAAzB/D,EAAyB8D,EAAzB9D,IAAKC,EAAoB6D,EAApB7D,KACrB,OAAOe,EAAAC,EAAAC,cAAA,MAAI8C,IAAKhE,GACZC,EAAKyC,IAAI,SAAAuB,EAAQC,GAAa,IAAnBvE,EAAmBsE,EAAnBtE,IACP,OAAOqB,EAAAC,EAAAC,cAACiD,EAAD,CAAMxE,IAAKA,EAAKK,IAAKA,EAAKgE,IAAKrE,EAAKgC,OAAQgC,EAAU7D,MAAO6D,EACvDT,aAAcW,EAAKX,aAAaa,EAAUG,2CAmF9D,IAAAE,EACiF1D,KAAKgB,MAApFK,EADFqC,EACErC,aAAcC,EADhBoC,EACgBpC,YAAaJ,EAD7BwC,EAC6BxC,mBAAoBK,EADjDmC,EACiDnC,cAAeC,EADhEkC,EACgElC,cAC9DyB,EAAYjD,KAAKC,MAAjBgD,SAEP,OACI3C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MAAMiD,MAAO,CAACC,WAAY1C,IACrCZ,EAAAC,EAAAC,cAACqD,EAAD,CAAQF,MAAO,CAACG,KAAMzC,EAAc0C,WAAYxC,EAAenC,MAAO6D,EAAUhC,OAAQgC,GAChFe,QAAShE,KAAKsC,aACdI,aAAc1C,KAAK0C,aACnB/C,KAAK,SACLO,MAAM,OAElBI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACXJ,EAAAC,EAAAC,cAACqD,EAAD,CAAQF,MAAO,CAACM,IAAK3C,EAAayC,WAAYvC,EAAepC,MAAO6D,EAAUhC,OAAQgC,GAC9Ee,QAAShE,KAAKkC,UACdQ,aAAc1C,KAAK0C,aACnB/C,KAAK,SACLO,MAAM,OAElBI,EAAAC,EAAAC,cAAA,SAAOE,UAAU,QAAQgC,aAAc1C,KAAK0C,cACxCpC,EAAAC,EAAAC,cAAA,aACKR,KAAKkE,eAGd5D,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAACqD,EAAD,CAAQF,MAAO,CAACvE,MAAO6D,EAAUhC,OAAQgC,GACjCe,QAAShE,KAAK6B,UACdlC,KAAK,MACLO,MAAM,QAGtBI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASiD,MAAO,CAACC,WAAY1C,IACxCZ,EAAAC,EAAAC,cAACqD,EAAD,CAAQF,MAAO,CAACvE,MAAO6D,EAAUhC,OAAQgC,GACjCe,QAAShE,KAAKyB,OACd9B,KAAK,MACLO,MAAM,eAvLCU,iBAAdG,EAQVoD,aAAe,CAClBpB,aAAc,EACdC,cAAe,EACfC,SAAU,cEfGmB,mLAEb,OACI9D,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAC6D,EAAD,cAJiBC,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9db9ebcd.chunk.js","sourcesContent":["export default class Table {\n\n    static createColumn = (col) => {\n        return { col }\n    };\n\n    static createRow = (rowNumber, width) => {\n        const rowData = { row: rowNumber, cols: []};\n        for (let col = 0; col < width; col++) {\n            rowData.cols.push(Table.createColumn(col))\n        }\n        return rowData;\n    };\n\n    static getVisibility = (matrix, type, status) => {\n        const length = type === 'row' ? matrix.length : matrix[0].cols.length;\n\n        return length < 2 ? 'hidden' : status;\n    }\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends PureComponent {\n\n    static propTypes = {\n        type: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n    };\n\n    render() {\n        const { type, title, ...buttonProps } = this.props;\n\n        return (\n            <button {...buttonProps} className={`button ${type}-button`}>{ title }</button>\n        );\n\n    }\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Cell extends PureComponent {\n\n    static propTypes = {\n        row: PropTypes.number.isRequired,\n        col: PropTypes.number.isRequired,\n        width: PropTypes.number.isRequired,\n        height: PropTypes.number.isRequired,\n    };\n\n    render() {\n\n        const { row, col, ...tdProps } = this.props;\n\n        return (\n            <td className=\"cell\" {...tdProps}>{ `${row},${col}` }</td>\n        );\n\n    }\n}\n","import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { BUTTON_MARGIN } from '../utils/constants';\nimport Table from '../helpers/Table';\nimport Button from './Button';\nimport Cell from './Cell';\n\nexport default class Cubes extends PureComponent {\n\n    static propTypes = {\n        initialWidth: PropTypes.number,\n        initialHeight: PropTypes.number,\n        cellSize: PropTypes.number,\n    };\n\n    static defaultProps = {\n        initialWidth: 4,\n        initialHeight: 4,\n        cellSize: 50,\n    };\n\n    state = {\n        matrix: [],\n        width: 0,\n        height: 0,\n        cellSizeWithMargin: 0,\n        activeRow: 0,\n        activeCol: 0,\n        rmButtonLeft: 0,\n        rmButtonTop: 0,\n        visibilityCol: 'hidden',\n        visibilityRow: 'hidden',\n    };\n\n    componentDidMount() {\n        this.init();\n    };\n\n    componentDidUpdate(props) {\n        const { initialWidth, initialHeight, cellSize } = this.props;\n\n        if (props.initialWidth !== initialWidth || props.initialHeight !== initialHeight || props.cellSize !== cellSize) {\n            this.init();\n        }\n    }\n\n    init() {\n        const matrix = [];\n        const {initialHeight, initialWidth, cellSize} = this.props;\n        for (let row = 0; row < initialHeight; row++) {\n            matrix.push(Table.createRow(row, initialWidth));\n        }\n\n        this.setState({\n            matrix,\n            width: initialWidth,\n            height: initialHeight,\n            cellSize,\n            cellSizeWithMargin: cellSize + BUTTON_MARGIN,\n        });\n    };\n\n    buildTable() {\n        const {matrix} = this.state;\n        const {cellSize} = this.props;\n\n        return matrix.map(({row, cols}, indexRow) => {\n            return <tr key={row}>{\n                cols.map(({col}, indexCol) => {\n                    return <Cell col={col} row={row} key={col} height={cellSize} width={cellSize}\n                                 onMouseEnter={this.onMouseEnter(indexRow, indexCol)}/>\n                })\n            }\n            </tr>;\n        });\n    };\n\n    addRow = () => {\n        const {matrix, height} = this.state;\n        matrix.push(Table.createRow(height, matrix[0].cols.length));\n\n        this.setState({\n            matrix,\n            height: height + 1,\n        });\n    };\n\n    addColumn = () => {\n        const {matrix, width} = this.state;\n        const newMatrix = matrix.map(item => {\n            item.cols.push(Table.createColumn(width));\n            return item;\n        });\n\n        this.setState({\n            matrix: newMatrix,\n            width: width + 1,\n        });\n    };\n\n    removeRow = () => {\n        const {matrix, activeRow} = this.state;\n\n        if (matrix.length > 1) {\n            const newMatrix = matrix.filter((item, index) => index !== activeRow);\n\n            this.setState({\n                matrix: newMatrix,\n                visibilityRow: Table.getVisibility(newMatrix, 'row', 'visible'),\n            });\n        }\n    };\n\n    removeColumn = () => {\n        const {matrix, activeCol} = this.state;\n\n        if (matrix[0].cols.length > 1) {\n            const newMatrix = matrix.map(item => {\n                item.cols = item.cols.filter((item, index) => index !== activeCol);\n                return item;\n            });\n\n            this.setState({\n                matrix: newMatrix,\n                visibilityCol: Table.getVisibility(newMatrix, 'col', 'visible'),\n            });\n        }\n    };\n\n    onMouseEnter = (activeRow, activeCol) => {\n        const {matrix, cellSizeWithMargin} = this.state;\n\n        return () => {\n            this.setState({\n                activeRow,\n                activeCol,\n                rmButtonLeft: activeCol * cellSizeWithMargin,\n                rmButtonTop: activeRow * cellSizeWithMargin,\n                visibilityRow: Table.getVisibility(matrix, 'row', 'visible'),\n                visibilityCol: Table.getVisibility(matrix, 'col', 'visible'),\n            });\n        };\n    };\n\n    onMouseLeave = (e) => {\n        if (e.relatedTarget.className && !e.relatedTarget.className.includes('remove')) {\n            this.setState({\n                visibilityCol: 'hidden',\n                visibilityRow: 'hidden',\n            });\n        }\n    };\n\n    render() {\n        const {rmButtonLeft, rmButtonTop, cellSizeWithMargin, visibilityCol, visibilityRow} = this.state;\n        const {cellSize} = this.props;\n\n        return (\n            <div>\n                <div className=\"top\" style={{marginLeft: cellSizeWithMargin}}>\n                    <Button style={{left: rmButtonLeft, visibility: visibilityCol, width: cellSize, height: cellSize}}\n                            onClick={this.removeColumn}\n                            onMouseLeave={this.onMouseLeave}\n                            type=\"remove\"\n                            title=\"-\"/>\n                </div>\n                <div className=\"container\">\n                    <div className=\"left\">\n                        <Button style={{top: rmButtonTop, visibility: visibilityRow, width: cellSize, height: cellSize}}\n                                onClick={this.removeRow}\n                                onMouseLeave={this.onMouseLeave}\n                                type=\"remove\"\n                                title=\"-\"/>\n                    </div>\n                    <table className=\"table\" onMouseLeave={this.onMouseLeave}>\n                        <tbody>\n                            {this.buildTable()}\n                        </tbody>\n                    </table>\n                    <div className=\"right\">\n                        <Button style={{width: cellSize, height: cellSize}}\n                                onClick={this.addColumn}\n                                type=\"add\"\n                                title=\"+\"/>\n                    </div>\n                </div>\n                <div className=\"bottom\" style={{marginLeft: cellSizeWithMargin}}>\n                    <Button style={{width: cellSize, height: cellSize}}\n                            onClick={this.addRow}\n                            type=\"add\"\n                            title=\"+\"/>\n                </div>\n            </div>\n        );\n    }\n};\n","export const BUTTON_MARGIN = 4;\n","import React, {Component} from 'react';\nimport Cubes from './components/Cubes.jsx';\nimport './App.css';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Cubes/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}